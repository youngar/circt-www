<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dialects on CIRCT</title><link>https://circt.llvm.org/docs/Dialects/</link><description>Recent content in Dialects on CIRCT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://circt.llvm.org/docs/Dialects/index.xml" rel="self" type="application/rss+xml"/><item><title>'esi' Dialect</title><link>https://circt.llvm.org/docs/Dialects/ESI/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/ESI/</guid><description>Type constraint definition An ESI-compatible channel port Operation definition esi.decode.capnp (::circt::esi::CapnpDecode) esi.encode.capnp (::circt::esi::CapnpEncode) esi.buffer (::circt::esi::ChannelBuffer) esi.cosim (::circt::esi::CosimEndpoint) esi.stage (::circt::esi::PipelineStage) esi.unwrap.iface (::circt::esi::UnwrapSVInterface) esi.unwrap.vr (::circt::esi::UnwrapValidReady) esi.wrap.iface (::circt::esi::WrapSVInterface) esi.wrap.vr (::circt::esi::WrapValidReady) Type definition Channel (ChannelPort) Type constraint definition An ESI-compatible channel port An ESI port kind which models a latency-insensitive, unidirectional, point-to-point data stream. Channels are typed (like all of ESI). Said type can be any MLIR type, but must be lowered to something a backend knows how to output (i.</description></item><item><title>'firrtl' Dialect</title><link>https://circt.llvm.org/docs/Dialects/FIRRTL/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/FIRRTL/</guid><description>Types and operations for firrtl dialect This dialect defines the firrtl dialect, which is used to lower from Chisel code to Verilog. For more information, see the FIRRTL GitHub page .
Operation definition firrtl.add (::circt::firrtl::AddPrimOp) firrtl.analogInOutCast (::circt::firrtl::AnalogInOutCastOp) firrtl.and (::circt::firrtl::AndPrimOp) firrtl.andr (::circt::firrtl::AndRPrimOp) firrtl.asAsyncReset (::circt::firrtl::AsAsyncResetPrimOp) firrtl.asClock (::circt::firrtl::AsClockPrimOp) firrtl.asNonPassive (::circt::firrtl::AsNonPassivePrimOp) firrtl.asPassive (::circt::firrtl::AsPassivePrimOp) firrtl.asSInt (::circt::firrtl::AsSIntPrimOp) firrtl.asUInt (::circt::firrtl::AsUIntPrimOp) firrtl.assert (::circt::firrtl::AssertOp) firrtl.assume (::circt::firrtl::AssumeOp) firrtl.attach (::circt::firrtl::AttachOp) firrtl.bits (::circt::firrtl::BitsPrimOp) firrtl.cmem (::circt::firrtl::CMemOp) firrtl.cat (::circt::firrtl::CatPrimOp) firrtl.circuit (::circt::firrtl::CircuitOp) firrtl.connect (::circt::firrtl::ConnectOp) firrtl.</description></item><item><title>'handshake' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Handshake/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Handshake/</guid><description>Principle Choice of MLIR IR Representation Conventions Resources Operation definitions handshake.branch (::circt::handshake::BranchOp) handshake.buffer (::circt::handshake::BufferOp) handshake.conditional_branch (::circt::handshake::ConditionalBranchOp) handshake.constant (::circt::handshake::ConstantOp) handshake.control_merge (::circt::handshake::ControlMergeOp) handshake.end (::circt::handshake::EndOp) handshake.fork (::circt::handshake::ForkOp) handshake.func (::circt::handshake::FuncOp) handshake.instance (::circt::handshake::InstanceOp) handshake.join (::circt::handshake::JoinOp) handshake.lazy_fork (::circt::handshake::LazyForkOp) handshake.load (::circt::handshake::LoadOp) handshake.memory (::circt::handshake::MemoryOp) handshake.merge (::circt::handshake::MergeOp) handshake.mux (::circt::handshake::MuxOp) handshake.never (::circt::handshake::NeverOp) handshake.return (::circt::handshake::ReturnOp) handshake.sink (::circt::handshake::SinkOp) handshake.source (::circt::handshake::SourceOp) handshake.start (::circt::handshake::StartOp) handshake.store (::circt::handshake::StoreOp) handshake.terminator (::circt::handshake::TerminatorOp) This document also explains in a high-level manner how different components are organized, the principles behind them and the conventions we followed.</description></item><item><title>'llhd' Dialect</title><link>https://circt.llvm.org/docs/Dialects/LLHD/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/LLHD/</guid><description>A low-level hardware description dialect in MLIR.
Operation definition llhd.and (::circt::llhd::AndOp) llhd.array (::circt::llhd::ArrayOp) llhd.array_uniform (::circt::llhd::ArrayUniformOp) llhd.const (::circt::llhd::ConstOp) llhd.drv (::circt::llhd::DrvOp) llhd.dyn_extract_element (::circt::llhd::DynExtractElementOp) llhd.dyn_extract_slice (::circt::llhd::DynExtractSliceOp) llhd.entity (::circt::llhd::EntityOp) llhd.eq (::circt::llhd::EqOp) llhd.extract_element (::circt::llhd::ExtractElementOp) llhd.extract_slice (::circt::llhd::ExtractSliceOp) llhd.halt (::circt::llhd::HaltOp) llhd.insert_element (::circt::llhd::InsertElementOp) llhd.insert_slice (::circt::llhd::InsertSliceOp) llhd.inst (::circt::llhd::InstOp) llhd.load (::circt::llhd::LoadOp) llhd.neg (::circt::llhd::NegOp) llhd.neq (::circt::llhd::NeqOp) llhd.not (::circt::llhd::NotOp) llhd.or (::circt::llhd::OrOp) llhd.prb (::circt::llhd::PrbOp) llhd.proc (::circt::llhd::ProcOp) llhd.reg (::circt::llhd::RegOp) llhd.smod (::circt::llhd::SModOp) llhd.shl (::circt::llhd::ShlOp) llhd.shr (::circt::llhd::ShrOp) llhd.sig (::circt::llhd::SigOp) llhd.store (::circt::llhd::StoreOp) llhd.terminator (::circt::llhd::TerminatorOp) llhd.tuple (::circt::llhd::TupleOp) llhd.</description></item><item><title>'rtl' Dialect</title><link>https://circt.llvm.org/docs/Dialects/RTL/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/RTL/</guid><description>Types and operations for rtl dialect This dialect defines the rtl dialect, which is intended to be a generic representation of RTL outside of a particular use-case.
Type constraint definition fixed-sized array inout type RTL struct type SystemVerilog &amp;lsquo;unpacked&amp;rsquo; fixed-sized array Operation definition rtl.add (::circt::rtl::AddOp) rtl.and (::circt::rtl::AndOp) rtl.andr (::circt::rtl::AndROp) rtl.array_create (::circt::rtl::ArrayCreateOp) rtl.array_get (::circt::rtl::ArrayGetOp) rtl.array_slice (::circt::rtl::ArraySliceOp) rtl.bitcast (::circt::rtl::BitcastOp) Integer bit vectors Arrays Structs Example figure rtl.concat (::circt::rtl::ConcatOp) rtl.</description></item><item><title>'staticlogic' Dialect</title><link>https://circt.llvm.org/docs/Dialects/StaticLogic/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/StaticLogic/</guid><description>Operation definition staticlogic.pipeline (::circt::staticlogic::PipelineOp) staticlogic.return (::circt::staticlogic::ReturnOp) Operation definition staticlogic.pipeline (::circt::staticlogic::PipelineOp) pipeline operation
The &amp;ldquo;staticlogic.pipeline&amp;rdquo; operation represents a statically scheduled pipeline stucture which contains several MLIR blocks. Each MLIR block is corresponding to a pipeline stage.
Operands: Operand Description «unnamed» any type Results: Result Description «unnamed» any type staticlogic.</description></item><item><title>'sv' Dialect</title><link>https://circt.llvm.org/docs/Dialects/SV/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/SV/</guid><description>Types and operations for SV dialect This dialect defines the sv dialect, which represents various SystemVerilog-specific constructs in an AST-like representation.
Type constraint definition SystemVerilog interface type pointing to an InterfaceOp SystemVerilog type pointing to an InterfaceModportOp Operation definition sv.alias (::circt::sv::AliasOp) sv.alwaysff (::circt::sv::AlwaysFFOp) sv.always (::circt::sv::AlwaysOp) sv.array_index_inout (::circt::sv::ArrayIndexInOutOp) sv.assert (::circt::sv::AssertOp) sv.interface.signal.assign (::circt::sv::AssignInterfaceSignalOp) sv.assume (::circt::sv::AssumeOp) sv.bpassign (::circt::sv::BPAssignOp) sv.connect (::circt::sv::ConnectOp) sv.cover (::circt::sv::CoverOp) sv.fwrite (::circt::sv::FWriteOp) sv.fatal (::circt::sv::FatalOp) sv.finish (::circt::sv::FinishOp) sv.</description></item></channel></rss>